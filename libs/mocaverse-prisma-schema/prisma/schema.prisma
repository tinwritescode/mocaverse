generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_ONE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id   Int     @id @default(autoincrement())
  name String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  providers    Provider[]
  RefreshToken RefreshToken[]

  InviteCode InviteCode?
}

enum ProviderType {
  EVM_WALLET
  EMAIL
}

model Provider {
  id   Int          @id @default(autoincrement())
  type ProviderType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  inviteCode   InviteCode @relation(fields: [inviteCodeId], references: [id])
  inviteCodeId Int

  EmailProvider EmailProvider?
  EVMProvider   EVMProvider?

  @@index([userId])
}

model EVMProvider {
  id      Int    @id @default(autoincrement())
  address String @unique

  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId Int      @unique
}

model EmailProvider {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  providerId Int      @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InviteCode {
  id   Int    @id @default(autoincrement())
  code String @unique

  remaining Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Provider Provider[]
  User     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int        @unique

  @@index([code])
}

model RefreshToken {
  id    Int    @id @default(autoincrement())
  token String @unique

  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
